/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musicplayer;

import jaco.mp3.player.MP3Player;
import java.awt.List;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ASUS
 */
public class PlayerForm extends javax.swing.JFrame {

    MP3Player player;
    SongList songList=new SongList();
    PlayList playList=new PlayList();
    
    
    
    File songFile;
    String currentDirectory="home.user";
    String currentPath;
    
    String imagePath;
    
    boolean repeat=false;
    
    boolean windowCollapsed=false;
    
    int xMouse,yMouse;
    //DefaultListModel dlm=new DefaultListModel();
    
    public PlayerForm() {
        initComponents();
       
        tblSongs.getColumnModel().getColumn(0).setMaxWidth(0);
        songFile=new File("D:\\Songs\\Mandaaram-Kathawe-Hathey-Hatha-Anushka-Udana-Wasthi-www.song.lk.mp3");
        
       String fileName=songFile.getName();
       
       lblPlaying.setText(fileName);
       
       player=mp3Player();
       
       player.addToPlayList(songFile);
       
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        appNamelbl = new javax.swing.JPanel();
        apptitleLBl = new javax.swing.JLabel();
        btnSettingLBL = new javax.swing.JLabel();
        btnPowerLBL1 = new javax.swing.JLabel();
        songPlayingPnl = new javax.swing.JPanel();
        songPlayingPnl2 = new javax.swing.JPanel();
        lblPlaying = new javax.swing.JLabel();
        buttonPnl = new javax.swing.JPanel();
        btnPauseLbl = new javax.swing.JLabel();
        btnRepeatlbl1 = new javax.swing.JLabel();
        btnPlayLbl = new javax.swing.JLabel();
        btnStopLbl = new javax.swing.JLabel();
        btnVolumeDownLBL = new javax.swing.JLabel();
        btnVolumeUPLBL1 = new javax.swing.JLabel();
        btnVolumeFullLBL = new javax.swing.JLabel();
        btnMuteLNL = new javax.swing.JLabel();
        btnAddSong = new javax.swing.JLabel();
        btnPrevious = new javax.swing.JLabel();
        btnNext = new javax.swing.JLabel();
        pnlPlayList = new javax.swing.JPanel();
        btnDeleteBeg = new javax.swing.JButton();
        btnDeleteEnd = new javax.swing.JButton();
        btnShowCount = new javax.swing.JButton();
        btnSortAtoZ = new javax.swing.JButton();
        btnSortZtoA = new javax.swing.JButton();
        btnDeleteSelectedSong = new javax.swing.JButton();
        btnDeletePlayList = new javax.swing.JButton();
        btnUpdatePlayList = new javax.swing.JButton();
        txtSearchSong = new javax.swing.JTextField();
        pnlSongsList = new javax.swing.JPanel();
        scrolPanePlayList = new javax.swing.JScrollPane();
        tblSongs = new javax.swing.JTable();
        btnSavePlayList = new javax.swing.JButton();
        txtPlayListName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        cmbPlayListNames = new javax.swing.JComboBox<>();
        txtSongNameAfterSearch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlMain.setBackground(new java.awt.Color(7, 63, 86));

        appNamelbl.setBackground(new java.awt.Color(7, 63, 86));

        apptitleLBl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        apptitleLBl.setForeground(new java.awt.Color(153, 0, 153));
        apptitleLBl.setText("    P D S A            P L A Y E R");

        btnSettingLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/settings_24px.png"))); // NOI18N

        btnPowerLBL1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/shutdown_48px.png"))); // NOI18N

        javax.swing.GroupLayout appNamelblLayout = new javax.swing.GroupLayout(appNamelbl);
        appNamelbl.setLayout(appNamelblLayout);
        appNamelblLayout.setHorizontalGroup(
            appNamelblLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appNamelblLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(apptitleLBl, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSettingLBL)
                .addGap(61, 61, 61))
            .addGroup(appNamelblLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appNamelblLayout.createSequentialGroup()
                    .addContainerGap(652, Short.MAX_VALUE)
                    .addComponent(btnPowerLBL1)
                    .addGap(3, 3, 3)))
        );
        appNamelblLayout.setVerticalGroup(
            appNamelblLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appNamelblLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appNamelblLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSettingLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(apptitleLBl, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(appNamelblLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(appNamelblLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnPowerLBL1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        songPlayingPnl.setBackground(new java.awt.Color(7, 63, 86));

        lblPlaying.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPlaying.setText("NOW Playing");

        javax.swing.GroupLayout songPlayingPnl2Layout = new javax.swing.GroupLayout(songPlayingPnl2);
        songPlayingPnl2.setLayout(songPlayingPnl2Layout);
        songPlayingPnl2Layout.setHorizontalGroup(
            songPlayingPnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songPlayingPnl2Layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(lblPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(149, Short.MAX_VALUE))
        );
        songPlayingPnl2Layout.setVerticalGroup(
            songPlayingPnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songPlayingPnl2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPlaying, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout songPlayingPnlLayout = new javax.swing.GroupLayout(songPlayingPnl);
        songPlayingPnl.setLayout(songPlayingPnlLayout);
        songPlayingPnlLayout.setHorizontalGroup(
            songPlayingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songPlayingPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(songPlayingPnl2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );
        songPlayingPnlLayout.setVerticalGroup(
            songPlayingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songPlayingPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(songPlayingPnl2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonPnl.setBackground(new java.awt.Color(7, 63, 86));

        btnPauseLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pause_button_64px.png"))); // NOI18N
        btnPauseLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPauseLblMouseClicked(evt);
            }
        });

        btnRepeatlbl1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/repeat_64px.png"))); // NOI18N

        btnPlayLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/play_button_64px.png"))); // NOI18N
        btnPlayLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPlayLblMouseClicked(evt);
            }
        });

        btnStopLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/stop_64px.png"))); // NOI18N
        btnStopLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStopLblMouseClicked(evt);
            }
        });

        btnVolumeDownLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/speaker_26px.png"))); // NOI18N

        btnVolumeUPLBL1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/speaker_30px.png"))); // NOI18N

        btnVolumeFullLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/speaker_24px.png"))); // NOI18N

        btnMuteLNL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/mute_64px.png"))); // NOI18N

        btnAddSong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add_64px.png"))); // NOI18N
        btnAddSong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddSongMouseClicked(evt);
            }
        });

        btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/skip_to_start_24px2.png"))); // NOI18N
        btnPrevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPreviousMouseClicked(evt);
            }
        });

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/end_24px2.png"))); // NOI18N
        btnNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout buttonPnlLayout = new javax.swing.GroupLayout(buttonPnl);
        buttonPnl.setLayout(buttonPnlLayout);
        buttonPnlLayout.setHorizontalGroup(
            buttonPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPnlLayout.createSequentialGroup()
                .addGroup(buttonPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPnlLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnRepeatlbl1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPauseLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPlayLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStopLbl))
                    .addGroup(buttonPnlLayout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addComponent(btnAddSong)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVolumeDownLBL)
                .addGap(18, 18, 18)
                .addComponent(btnVolumeUPLBL1)
                .addGap(18, 18, 18)
                .addComponent(btnVolumeFullLBL)
                .addGap(40, 40, 40)
                .addComponent(btnMuteLNL)
                .addGap(30, 30, 30))
        );
        buttonPnlLayout.setVerticalGroup(
            buttonPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddSong, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(buttonPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPnlLayout.createSequentialGroup()
                        .addGroup(buttonPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMuteLNL, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnVolumeFullLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRepeatlbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnStopLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPlayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPauseLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(buttonPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPrevious)
                            .addComponent(btnNext)))
                    .addGroup(buttonPnlLayout.createSequentialGroup()
                        .addGroup(buttonPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnVolumeUPLBL1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnVolumeDownLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        btnDeleteBeg.setText("Delete Begining");
        btnDeleteBeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBegActionPerformed(evt);
            }
        });

        btnDeleteEnd.setText("Delete End");
        btnDeleteEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEndActionPerformed(evt);
            }
        });

        btnShowCount.setText("Show No Of Songs");
        btnShowCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowCountActionPerformed(evt);
            }
        });

        btnSortAtoZ.setText("Sort A-Z");
        btnSortAtoZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortAtoZActionPerformed(evt);
            }
        });

        btnSortZtoA.setText("Sort Z-A");
        btnSortZtoA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortZtoAActionPerformed(evt);
            }
        });

        btnDeleteSelectedSong.setText("Delete Song");
        btnDeleteSelectedSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedSongActionPerformed(evt);
            }
        });

        btnDeletePlayList.setText("Delete PlayList");
        btnDeletePlayList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePlayListActionPerformed(evt);
            }
        });

        btnUpdatePlayList.setText("updatePLayList");
        btnUpdatePlayList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePlayListActionPerformed(evt);
            }
        });

        txtSearchSong.setToolTipText("Search Song\n");
        txtSearchSong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchSongKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchSongKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlPlayListLayout = new javax.swing.GroupLayout(pnlPlayList);
        pnlPlayList.setLayout(pnlPlayListLayout);
        pnlPlayListLayout.setHorizontalGroup(
            pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPlayListLayout.createSequentialGroup()
                .addGroup(pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPlayListLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnDeleteBeg))
                    .addGroup(pnlPlayListLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnSortAtoZ)))
                .addGap(26, 26, 26)
                .addGroup(pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPlayListLayout.createSequentialGroup()
                        .addComponent(btnDeleteEnd)
                        .addGap(29, 29, 29)
                        .addComponent(btnDeleteSelectedSong)
                        .addGap(18, 18, 18)
                        .addComponent(btnShowCount))
                    .addComponent(btnSortZtoA))
                .addGap(18, 18, 18)
                .addGroup(pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdatePlayList)
                    .addComponent(btnDeletePlayList)
                    .addComponent(txtSearchSong, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPlayListLayout.setVerticalGroup(
            pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPlayListLayout.createSequentialGroup()
                .addGroup(pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPlayListLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteBeg)
                            .addComponent(btnDeleteEnd)
                            .addComponent(btnDeleteSelectedSong))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPlayListLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtSearchSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnShowCount)
                            .addComponent(btnDeletePlayList))))
                .addGroup(pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPlayListLayout.createSequentialGroup()
                        .addGroup(pnlPlayListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSortAtoZ)
                            .addComponent(btnSortZtoA))
                        .addGap(0, 18, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPlayListLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdatePlayList)))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(appNamelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(songPlayingPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlPlayList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addComponent(appNamelbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(songPlayingPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPlayList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        scrolPanePlayList.setBackground(new java.awt.Color(0, 0, 102));

        tblSongs.setBackground(new java.awt.Color(0, 0, 102));
        tblSongs.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        tblSongs.setForeground(new java.awt.Color(255, 255, 255));
        tblSongs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Song", "Song Name"
            }
        ));
        tblSongs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSongsMouseClicked(evt);
            }
        });
        scrolPanePlayList.setViewportView(tblSongs);

        btnSavePlayList.setText("Save PlayList");
        btnSavePlayList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePlayListActionPerformed(evt);
            }
        });

        jLabel1.setText("Play List Name");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cmbPlayListNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PlayLists" }));
        cmbPlayListNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPlayListNamesActionPerformed(evt);
            }
        });

        txtSongNameAfterSearch.setEditable(false);

        javax.swing.GroupLayout pnlSongsListLayout = new javax.swing.GroupLayout(pnlSongsList);
        pnlSongsList.setLayout(pnlSongsListLayout);
        pnlSongsListLayout.setHorizontalGroup(
            pnlSongsListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSongsListLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlSongsListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlSongsListLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPlayListName, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSongNameAfterSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlSongsListLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSavePlayList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbPlayListNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrolPanePlayList, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(134, 134, 134))
        );
        pnlSongsListLayout.setVerticalGroup(
            pnlSongsListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSongsListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSongsListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSongsListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPlayListName, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSongNameAfterSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrolPanePlayList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSongsListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSavePlayList)
                    .addComponent(btnSearch)
                    .addComponent(cmbPlayListNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSongsList, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlSongsList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    private void btnPlayLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPlayLblMouseClicked
        player.play();// TODO add your handling code here:
        
    }//GEN-LAST:event_btnPlayLblMouseClicked

    private void btnPauseLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPauseLblMouseClicked
        player.pause();        // TODO add your handling code here:
    }//GEN-LAST:event_btnPauseLblMouseClicked

    
    private void btnAddSongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddSongMouseClicked
        tblSongs.getSelectionModel().clearSelection();
        //tblSongs.removeRowSelectionInterval(0,tblSongs.getRowCount()-1);
        JFileChooser openFileChooser=new JFileChooser(currentDirectory);
        openFileChooser.setFileFilter(new FileTypeFilter(".mp3","Open MP3 Files Only!"));
        int result=openFileChooser.showOpenDialog(null);
        
        if(result== JFileChooser.APPROVE_OPTION){
            songFile=openFileChooser.getSelectedFile();
            //add song to table
            DefaultTableModel model = (DefaultTableModel)tblSongs.getModel();
            Object[] data={songFile,songFile.getName()};
            model.addRow(data);
            System.out.println("Row Count :"+ model.getRowCount());
            
            
            tblSongs.setRowSelectionInterval(tblSongs.getRowCount()-1,tblSongs.getRowCount()-1);
            //add to linked list song path
            
            songList.insertLast(songFile,songFile.getName());
           //add song to playList
            player.addToPlayList(songList.getSong());
            player.skipForward();
            currentDirectory=songFile.getAbsolutePath();
            lblPlaying.setText(songFile.getName());
            
        }
         
    }//GEN-LAST:event_btnAddSongMouseClicked

    private void tblSongsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSongsMouseClicked
        int row=tblSongs.getSelectedRow();
        DefaultTableModel dtm=(DefaultTableModel)tblSongs.getModel();
        
        songFile=(File)dtm.getValueAt(row, 0);
        player.addToPlayList(songFile);
            
        player.skipForward();
        currentDirectory=songFile.getAbsolutePath();
        lblPlaying.setText(songFile.getName());
    // TODO add your handling code here:
    }//GEN-LAST:event_tblSongsMouseClicked

    private void btnNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseClicked
       
        int row=tblSongs.getSelectedRow();
        System.out.println("Selected Row After Next Button :"+row);
        DefaultTableModel dtm=(DefaultTableModel)tblSongs.getModel();
        File currentSongPath=(File)dtm.getValueAt(row, 0);
        
        //File currentSongPath=(File)lblPlaying.getText();
        //System.out.println("Path test :"+currentSongPath);
        System.out.println("Current Song path :"+currentSongPath);
        
        File nextSongpath=songList.playNextSong(currentSongPath);
         
         
        if(nextSongpath!=null){
            player.addToPlayList(nextSongpath);

            player.skipForward();
            currentDirectory=songFile.getAbsolutePath();
            lblPlaying.setText(nextSongpath.getName());
            if(tblSongs.getRowCount()-1!=row){
                tblSongs.setRowSelectionInterval(row+1,row+1);
            }else{
                tblSongs.setRowSelectionInterval(0,0);
            }
            
        }else{
            System.out.println("Next Song is null");
        }
        
        
    }//GEN-LAST:event_btnNextMouseClicked

    private void btnPreviousMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPreviousMouseClicked
        int row=tblSongs.getSelectedRow();
         
        DefaultTableModel dtm=(DefaultTableModel)tblSongs.getModel();
        File currentSongPath=(File)dtm.getValueAt(row, 0);
        
        //File currentSongPath=(File)lblPlaying.getText();
        //System.out.println("Path test :"+currentSongPath);
        System.out.println("Current Song path :"+currentSongPath);
        
        File previousSongpath=songList.playPreviousSong(currentSongPath);
         //System.out.println("Previous Song path :"+previousSongpath); 
         
        if(previousSongpath!=null){
            player.addToPlayList(previousSongpath);

            player.skipForward();
            currentDirectory=songFile.getAbsolutePath();
            lblPlaying.setText(previousSongpath.getName());
            if(row-1!=-1){
                tblSongs.setRowSelectionInterval(row-1,row-1);
            }else if(row-1==-1){
                tblSongs.setRowSelectionInterval(tblSongs.getRowCount()-1, tblSongs.getRowCount()-1);
            }
            
        
        }else{
            System.out.println("No Previous Song Song is null");
        }
    }//GEN-LAST:event_btnPreviousMouseClicked

    private void btnDeleteBegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBegActionPerformed
        int result=songList.deleteFromBegining();
        int selectedRow=tblSongs.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)tblSongs.getModel();
            
        if(result==1){
            model.removeRow(0);
            JOptionPane.showMessageDialog(this, "Done");
            if(selectedRow-1==-1){
                player.stop();
               // lblPlaying.setText("No Songs To Play");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Fail");
        }
    }//GEN-LAST:event_btnDeleteBegActionPerformed

    private void btnDeleteEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteEndActionPerformed
         int result=songList.deleteFromEnd();
         int selectedRow=tblSongs.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)tblSongs.getModel();
            
        if(result==1){
             
            model.removeRow(tblSongs.getRowCount()-1);
            if(selectedRow-1!=-1){
                tblSongs.setRowSelectionInterval(tblSongs.getRowCount()-1,tblSongs.getRowCount()-1);
                songFile=(File)model.getValueAt(tblSongs.getSelectedRow(), 0);
                player.addToPlayList(songFile);

                player.skipForward();
                currentDirectory=songFile.getAbsolutePath();
                lblPlaying.setText(songFile.getName());    
            }else{
                player.stop();
                //lblPlaying.setText("No Songs To Play");
            }
           
            
            
            JOptionPane.showMessageDialog(this, "Done");
            
        }else{
            JOptionPane.showMessageDialog(this, "Fail");
        }
    }//GEN-LAST:event_btnDeleteEndActionPerformed

    private void btnShowCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowCountActionPerformed
        songList.getCountOfAllSongs();        // TODO add your handling code here:
    }//GEN-LAST:event_btnShowCountActionPerformed
    //clear table raws
    public void removeRows(){
        DefaultTableModel dm = (DefaultTableModel)tblSongs.getModel();
        int rowCount = dm.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
           dm.removeRow(i);
        }
    }
    private void btnSortAtoZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortAtoZActionPerformed
        
        removeRows();
        songList.sort(0);
        
        File[] sortedSongList=songList.getSortedSongListPath();
        String [] sortedSongName=songList.getSortedSongListName();
        String[] cleanedSongNameArray = Arrays.stream(sortedSongName).filter(Objects::nonNull).toArray(String[]::new);
        File[] cleanedSongPaths=Arrays.stream(sortedSongList).filter(Objects::nonNull).toArray(File[]::new);
        for(int i=0;i<cleanedSongNameArray.length;i++){
            DefaultTableModel model = (DefaultTableModel)tblSongs.getModel();
            Object[] data={cleanedSongPaths[i],cleanedSongNameArray[i]};
            model.addRow(data);
            //System.out.println("Sorted Song List :"+sortedSongName[i]);
            tblSongs.setRowSelectionInterval(0,0);
        }
        //songList.display();
    }//GEN-LAST:event_btnSortAtoZActionPerformed

    private void btnSortZtoAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortZtoAActionPerformed
         removeRows();
        songList.sort(1);
        
        File[] sortedSongList=songList.getSortedSongListPath();
        String [] sortedSongName=songList.getSortedSongListName();
        String[] cleanedSongNameArray = Arrays.stream(sortedSongName).filter(Objects::nonNull).toArray(String[]::new);
        File[] cleanedSongPaths=Arrays.stream(sortedSongList).filter(Objects::nonNull).toArray(File[]::new);
        for(int i=0;i<cleanedSongNameArray.length;i++){
            
            DefaultTableModel model = (DefaultTableModel)tblSongs.getModel();
            Object[] data={cleanedSongPaths[i],cleanedSongNameArray[i]};
            model.addRow(data);
            //System.out.println("Sorted Song List :"+sortedSongName[i]);
            tblSongs.setRowSelectionInterval(0,0);
        }
    }//GEN-LAST:event_btnSortZtoAActionPerformed

    private void btnSavePlayListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePlayListActionPerformed
        String playListName=txtPlayListName.getText();
        //File[] songPath=songList.getSortedSongListPath();
        //String[] songName=songList.getSortedSongListName();
        //Object[] rowData = new Object[tblSongs.getColumnCount()];
        
        DefaultTableModel dtm=(DefaultTableModel)tblSongs.getModel();
        File[] songPath=new File[dtm.getRowCount()];
        String[] songName=new String[dtm.getRowCount()];
        for (int i = 0; i <dtm.getRowCount(); i++) {
            System.out.println("Done");
            songPath[i] =(File)dtm.getValueAt(i,0);
            songName[i]=dtm.getValueAt(i,1).toString();
        }
        //File[] songPath=(File)rowData;
        playList.insertEnd(playListName, songPath, songName,tblSongs.getRowCount());
        playList.print();
        
       //===================================================
       /*DefaultTableModel dtm=(DefaultTableModel)tblSongs.getModel();
        File[] songPath=new File[dtm.getRowCount()];
        String[] songName=new String[dtm.getRowCount()];
        for (int i = 0; i <dtm.getRowCount(); i++) {
            System.out.println("Done");
            songPath[i] =(File)dtm.getValueAt(i,0);
            songName[i]=dtm.getValueAt(i,1).toString();
        }
        //File[] songPath=(File)rowData;
        int task=playList.insertEndOrUpdateExist(playListName, songPath, songName,tblSongs.getRowCount());
        if(task==0){
            System.out.println("Saved New Play List");
        }else{
            System.out.println("Updated Existing");
        }
         playList.print();*/
        
       
       
        
        //add existing playListValues to Combo box
       
        String playListNameList[]=playList.getAllPlayListNames();
        
        String[] cleanedArray = Arrays.stream(playListNameList).filter(Objects::nonNull).toArray(String[]::new);
        //cmbPlayListNames.setSelectedIndex(0);
        
        cmbPlayListNames.setModel(new DefaultComboBoxModel(cleanedArray));
        
        
       
    }//GEN-LAST:event_btnSavePlayListActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
       removeRows();
       File[] songPathforSelectedPlayList=playList.getPlayListSongPaths(txtPlayListName.getText());
       String [] songNamesForSelectedPlayList=playList.getPlayListSongNames(txtPlayListName.getText());
       for(int i=0;i<songPathforSelectedPlayList.length;i++){
           //System.out.println("Songs from Selected Play List"+songNamesForSelectedPlayList[i]);
           DefaultTableModel model = (DefaultTableModel)tblSongs.getModel();
           Object[] data={songPathforSelectedPlayList[i],songNamesForSelectedPlayList[i]};
           model.addRow(data);
           //System.out.println("Sorted Song List :"+sortedSongName[i]);
           tblSongs.setRowSelectionInterval(0,0);
       }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void cmbPlayListNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPlayListNamesActionPerformed
       songList.deleteAllSongs();
        
       //txtPlayListName.setVisible(false);
       txtSongNameAfterSearch.setText(cmbPlayListNames.getSelectedItem().toString());
       removeRows();
       File[] songPathforSelectedPlayList=playList.getPlayListSongPaths(txtSongNameAfterSearch.getText());
       String [] songNamesForSelectedPlayList=playList.getPlayListSongNames(txtSongNameAfterSearch.getText());
      // String checkName[]=new String[songPathforSelectedPlayList.length]; 
       for(int i=0;i<songPathforSelectedPlayList.length;i++){
           
           songList.insertLast(songPathforSelectedPlayList[i], songNamesForSelectedPlayList[i]);
           //checkName[i]=songNamesForSelectedPlayList[i];
           //System.out.println("SongList CMB :"+checkName[i]);
           DefaultTableModel model = (DefaultTableModel)tblSongs.getModel();
           Object[] data={songPathforSelectedPlayList[i],songNamesForSelectedPlayList[i]};
           model.addRow(data);
           //songListTest.
           
           //System.out.println("Sorted Song List :"+sortedSongName[i]);
           tblSongs.setRowSelectionInterval(0,0);
       }
       //playList.print();
       
       
    }//GEN-LAST:event_cmbPlayListNamesActionPerformed

    private void btnDeleteSelectedSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedSongActionPerformed
        int row=tblSongs.getSelectedRow();
        DefaultTableModel dtm=(DefaultTableModel)tblSongs.getModel();
        
        if(dtm.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "No Songs To Delete");
        }else{
            File songPathToDelete=(File)dtm.getValueAt(row, 0);
            int val=songList.deleteSongToGivenSongPath(songPathToDelete);
            if(val==1){
                dtm.removeRow(row);
                System.out.print("Done");
                if(row-1!=-1){
                    tblSongs.setRowSelectionInterval(0,0);

                }
                player.stop();
            }else{
                System.out.print("Error");
            }
        }
    }//GEN-LAST:event_btnDeleteSelectedSongActionPerformed

    private void btnDeletePlayListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePlayListActionPerformed
        String playListName=txtPlayListName.getText();
        DefaultTableModel dtm=(DefaultTableModel)tblSongs.getModel();
        if(dtm.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "No Songs To Delete");
        }else{
             
            int val=playList.deleteSelectedPlayList(playListName);
            if(val==1){
                System.out.println("Done");
                String playListNameList[] = playList.getAllPlayListNames();
               
                String[] cleanedArray = Arrays.stream(playListNameList).filter(Objects::nonNull).toArray(String[]::new);
                //cmbPlayListNames.setSelectedIndex(0);
                cmbPlayListNames.setModel(new DefaultComboBoxModel(cleanedArray));
            }else{
                System.out.print("Error");
            }
        }
    }//GEN-LAST:event_btnDeletePlayListActionPerformed

    private void btnStopLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStopLblMouseClicked
         player.stop();
         
    }//GEN-LAST:event_btnStopLblMouseClicked

    private void btnUpdatePlayListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePlayListActionPerformed
       String playListName=txtSongNameAfterSearch.getText();
        DefaultTableModel dtm = (DefaultTableModel) tblSongs.getModel();
        File[] songPath = new File[dtm.getRowCount()];
        String[] songName = new String[dtm.getRowCount()];
        for (int i = 0; i < dtm.getRowCount(); i++) {
            System.out.println("Done");
            songPath[i] = (File) dtm.getValueAt(i, 0);
            songName[i] = dtm.getValueAt(i, 1).toString();
        }
        //File[] songPath=(File)rowData;
        playList.updatePlayList(playListName, songPath, songName);
        //playList.print();

        //add existing playListValues to Combo box
        String playListNameList[] = playList.getAllPlayListNames();

        String[] cleanedArray = Arrays.stream(playListNameList).filter(Objects::nonNull).toArray(String[]::new);
        //cmbPlayListNames.setSelectedIndex(0);

        cmbPlayListNames.setModel(new DefaultComboBoxModel(cleanedArray));
       
    }//GEN-LAST:event_btnUpdatePlayListActionPerformed

    private void txtSearchSongKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchSongKeyPressed
         DefaultTableModel dtm = (DefaultTableModel) tblSongs.getModel();
         TableRowSorter<DefaultTableModel> tr=new TableRowSorter<DefaultTableModel>(dtm);
         tblSongs.setRowSorter(tr);
         tr.setRowFilter(RowFilter.regexFilter(txtSearchSong.getText().trim()));
         
    }//GEN-LAST:event_txtSearchSongKeyPressed

    private void txtSearchSongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchSongKeyReleased
         DefaultTableModel dtm = (DefaultTableModel) tblSongs.getModel();
         TableRowSorter<DefaultTableModel> tr=new TableRowSorter<DefaultTableModel>(dtm);
         tblSongs.setRowSorter(tr);
         tr.setRowFilter(RowFilter.regexFilter(txtSearchSong.getText().trim()));
         
    }//GEN-LAST:event_txtSearchSongKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel appNamelbl;
    private javax.swing.JLabel apptitleLBl;
    private javax.swing.JLabel btnAddSong;
    private javax.swing.JButton btnDeleteBeg;
    private javax.swing.JButton btnDeleteEnd;
    private javax.swing.JButton btnDeletePlayList;
    private javax.swing.JButton btnDeleteSelectedSong;
    private javax.swing.JLabel btnMuteLNL;
    private javax.swing.JLabel btnNext;
    private javax.swing.JLabel btnPauseLbl;
    private javax.swing.JLabel btnPlayLbl;
    private javax.swing.JLabel btnPowerLBL1;
    private javax.swing.JLabel btnPrevious;
    private javax.swing.JLabel btnRepeatlbl1;
    private javax.swing.JButton btnSavePlayList;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel btnSettingLBL;
    private javax.swing.JButton btnShowCount;
    private javax.swing.JButton btnSortAtoZ;
    private javax.swing.JButton btnSortZtoA;
    private javax.swing.JLabel btnStopLbl;
    private javax.swing.JButton btnUpdatePlayList;
    private javax.swing.JLabel btnVolumeDownLBL;
    private javax.swing.JLabel btnVolumeFullLBL;
    private javax.swing.JLabel btnVolumeUPLBL1;
    private javax.swing.JPanel buttonPnl;
    private javax.swing.JComboBox<String> cmbPlayListNames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblPlaying;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPlayList;
    private javax.swing.JPanel pnlSongsList;
    private javax.swing.JScrollPane scrolPanePlayList;
    private javax.swing.JPanel songPlayingPnl;
    private javax.swing.JPanel songPlayingPnl2;
    private javax.swing.JTable tblSongs;
    private javax.swing.JTextField txtPlayListName;
    private javax.swing.JTextField txtSearchSong;
    private javax.swing.JTextField txtSongNameAfterSearch;
    // End of variables declaration//GEN-END:variables

    private MP3Player mp3Player(){
        MP3Player mp3Player= new MP3Player();
        return mp3Player;
    } 
}
